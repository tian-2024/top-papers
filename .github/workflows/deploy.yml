name: Deploy Paper List Web App

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run every week on Sunday at midnight UTC
  workflow_dispatch:  # Allow manual triggering

# Add permissions block here
permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install beautifulsoup4
      
      - name: Generate initial paper list
        run: |
          python select_papers.py
      
      - name: Create static site directory
        run: |
          mkdir -p site
          cp -r static site/
          cp templates/index.html site/index.html
      
      - name: Modify index.html for static site
        run: |
          python -c "
          import json
          import os
          from bs4 import BeautifulSoup
          
          # Read selected papers
          papers = []
          topic = 'diffusion'  # Default topic
          with open('selected_papers.txt', 'r') as f:
              for line in f:
                  line = line.strip()
                  if line and not line.startswith('ç”¨ markdown'):
                      if line.startswith('[') and ']' in line:
                          conf_year, title = line.split('] ', 1)
                          conf_year = conf_year[1:]
                          conf, year = conf_year.split('/')
                          papers.append({
                              'title': title,
                              'conference': conf,
                              'year': year
                          })
          
          # Read the HTML file
          with open('site/index.html', 'r') as f:
              soup = BeautifulSoup(f, 'html.parser')
          
          # Update the template to use static data
          script_tag = soup.new_tag('script')
          script_tag.string = f'''
          document.addEventListener('DOMContentLoaded', function() {{
              const searchBtn = document.getElementById('search-btn');
              const topicInput = document.getElementById('topic-input');
              const papersList = document.getElementById('papers-list');
              const loading = document.getElementById('loading');
              
              // Initial paper data
              const initialData = {json.dumps({'papers': papers})};
              let allPapersData = null;
              
              // Function to display papers
              function displayPapers(papers) {{
                  // Clear previous papers
                  papersList.innerHTML = '';
                  
                  // Show/hide table based on results
                  const papersTable = document.getElementById('papers-table');
                  
                  // Add papers
                  if (papers.length === 0) {{
                      papersTable.style.display = 'none';
                      const noResults = document.createElement('div');
                      noResults.textContent = 'No papers found for this topic';
                      noResults.style.textAlign = 'center';
                      noResults.style.padding = '20px';
                      papersList.parentNode.insertBefore(noResults, papersTable);
                  }} else {{
                      papersTable.style.display = 'table';
                      papers.forEach(paper => {{
                          const row = document.createElement('tr');
                          
                          // Conference cell
                          const confCell = document.createElement('td');
                          const confBadge = document.createElement('span');
                          confBadge.className = 'conference-badge';
                          confBadge.textContent = paper.conference.toUpperCase();
                          confCell.appendChild(confBadge);
                          
                          // Year cell
                          const yearCell = document.createElement('td');
                          yearCell.textContent = paper.year;
                          
                          // Title cell
                          const titleCell = document.createElement('td');
                          titleCell.className = 'paper-title';
                          titleCell.textContent = paper.title;
                          
                          // Add cells to row
                          row.appendChild(confCell);
                          row.appendChild(yearCell);
                          row.appendChild(titleCell);
                          
                          // Add row to table
                          papersList.appendChild(row);
                      }});
                  }}
              }}
              
              // Function to load all papers
              function loadAllPapers() {{
                  return fetch('papers.json')
                      .then(response => response.json())
                      .then(data => {{
                          allPapersData = data;
                          return data;
                      }});
              }}
              
              // Function to get random papers matching topic
              function getRandomPapersByTopic(topic) {{
                  if (!allPapersData) return [];
                  
                  const normalizedTopic = topic.toLowerCase().trim();
                  
                  // Filter papers by topic
                  const filteredPapers = allPapersData.papers.filter(paper => 
                      paper.title.toLowerCase().includes(normalizedTopic)
                  );
                  
                  // If we have enough papers, shuffle them
                  if (filteredPapers.length > 0) {{
                      // Randomize paper order
                      return [...filteredPapers].sort(() => 0.5 - Math.random());
                  }}
                  
                  return filteredPapers;
              }}
              
              // Function to search by user input
              function searchByTopic() {{
                  const topic = topicInput.value.trim();
                  if (!topic) return;
                  
                  // Show loading
                  loading.style.display = 'block';
                  document.getElementById('papers-table').style.display = 'none';
                  searchBtn.disabled = true;
                  
                  // Get papers for topic
                  const searchPromise = allPapersData ? 
                      Promise.resolve() : 
                      loadAllPapers();
                  
                  searchPromise.then(() => {{
                      const randomFilteredPapers = getRandomPapersByTopic(topic);
                      
                      // Display results (limit to 20 papers)
                      displayPapers(randomFilteredPapers.slice(0, 20));
                      
                      // Reset UI
                      loading.style.display = 'none';
                      searchBtn.disabled = false;
                  }});
              }}
              
              // Load all papers data on page load
              loadAllPapers();
              
              // Hide initial loading and table 
              loading.style.display = 'none';
              document.getElementById('papers-table').style.display = 'none';
              
              // Add click event to search button
              searchBtn.addEventListener('click', searchByTopic);
              
              // Add enter key event to topic input
              topicInput.addEventListener('keypress', function(e) {{
                  if (e.key === 'Enter') {{
                      searchByTopic();
                  }}
              }});
          }});
          '''
          
          # Find existing script tags and replace
          for script in soup.find_all('script'):
              if 'script.js' in str(script):
                  script.decompose()
          
          # Add our new script
          soup.body.append(script_tag)
          
          # Update CSS links
          for link in soup.find_all('link'):
              if 'url_for' in str(link.get('href')):
                  link['href'] = 'css/style.css'
          
          # Write the updated HTML
          with open('site/index.html', 'w') as f:
              f.write(str(soup))
          
          # Create a JSON file with all papers for client-side filtering
          all_papers = []
          paper_dirs = os.path.join('papers')
          for conf_dir in os.listdir(paper_dirs):
              conf_path = os.path.join(paper_dirs, conf_dir)
              if os.path.isdir(conf_path):
                  for year_file in os.listdir(conf_path):
                      if year_file.endswith('.txt'):
                          year = year_file.replace('.txt', '')
                          with open(os.path.join(conf_path, year_file), 'r') as f:
                              for line in f:
                                  line = line.strip()
                                  if line:
                                      all_papers.append({
                                          'title': line,
                                          'conference': conf_dir,
                                          'year': year
                                      })
          
          # Write all papers to a JSON file
          with open('site/papers.json', 'w') as f:
              json.dump({'papers': all_papers}, f)
          "
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true 
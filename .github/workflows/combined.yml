name: Paper Selection Tool

on:
  workflow_dispatch:
    inputs:
      topics:
        description: 'Topics to filter papers (comma-separated)'
        required: false
        default: 'diffusion'
      num_papers:
        description: 'Number of papers to select'
        required: false
        default: '50'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Convert papers to JSON
        run: |
          # 创建转换脚本
          cat > convert_to_json.py << 'EOF'
          import os
          import json
          import re

          # 收集所有会议和年份的论文
          papers_data = {}
          all_papers = []
          papers_dir = "./papers"

          # 遍历papers目录下的所有会议目录
          for conf_dir in os.listdir(papers_dir):
              conf_path = os.path.join(papers_dir, conf_dir)
              
              # 确保是目录而不是文件
              if not os.path.isdir(conf_path):
                  continue
                  
              # 遍历会议目录下的所有年份文件
              for year_file in os.listdir(conf_path):
                  if not year_file.endswith(".txt"):
                      continue
                      
                  year = year_file.replace(".txt", "")
                  input_file = os.path.join(conf_path, year_file)
                  
                  # 读取所有论文标题
                  with open(input_file, "r", encoding="utf-8") as f:
                      papers = [line.strip() for line in f if line.strip()]
                      
                  # 添加到数据结构
                  for paper in papers:
                      all_papers.append({
                          "title": paper,
                          "conference": conf_dir,
                          "year": year
                      })
          
          # 将数据保存为JSON文件
          with open("papers_data.json", "w", encoding="utf-8") as f:
              json.dump(all_papers, f, ensure_ascii=False, indent=2)
              
          print(f"已将{len(all_papers)}篇论文转换为JSON格式")
          EOF
          
          # 执行转换脚本
          python convert_to_json.py
      
      - name: Create frontend files
        run: |
          # 创建index.html
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>论文筛选工具</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
            <style>
              body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                padding: 20px;
                max-width: 1200px;
                margin: 0 auto;
              }
              .paper-item {
                margin-bottom: 10px;
                padding: 10px;
                border-radius: 5px;
                background-color: #f8f9fa;
              }
              .stats-table {
                margin-top: 20px;
                margin-bottom: 30px;
              }
              .filter-section {
                background-color: #f0f8ff;
                padding: 20px;
                border-radius: 8px;
                margin-bottom: 20px;
              }
              .results-section {
                margin-top: 30px;
              }
              .conference-badge {
                font-size: 0.8em;
                background-color: #e9ecef;
                padding: 3px 8px;
                border-radius: 12px;
                margin-right: 5px;
              }
              #loading {
                display: none;
                text-align: center;
                margin: 20px 0;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1 class="mb-4">论文筛选工具</h1>
              
              <div class="filter-section">
                <div class="row g-3">
                  <div class="col-md-6">
                    <label for="topicInput" class="form-label">筛选主题 (多个主题用逗号分隔)</label>
                    <input type="text" class="form-control" id="topicInput" placeholder="例如: diffusion, gan, transformer">
                  </div>
                  <div class="col-md-3">
                    <label for="numPapersInput" class="form-label">选择论文数量</label>
                    <input type="number" class="form-control" id="numPapersInput" value="50" min="1" max="1000">
                  </div>
                  <div class="col-md-3">
                    <label class="form-label">&nbsp;</label>
                    <button class="btn btn-primary form-control" id="filterButton">筛选论文</button>
                  </div>
                </div>
              </div>
              
              <div id="loading">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
                <p>正在筛选论文，请稍候...</p>
              </div>
              
              <div class="results-section">
                <div id="statsSection" style="display: none;">
                  <h2>统计信息</h2>
                  <div class="table-responsive">
                    <table class="table table-striped table-bordered stats-table">
                      <thead>
                        <tr>
                          <th>会议</th>
                          <th>年份</th>
                          <th>数量</th>
                          <th>比例</th>
                        </tr>
                      </thead>
                      <tbody id="statsTableBody">
                        <!-- 统计数据将在这里显示 -->
                      </tbody>
                    </table>
                  </div>
                </div>
                
                <div id="resultsSection" style="display: none;">
                  <h2>筛选结果 (<span id="resultsCount">0</span>)</h2>
                  <div id="papersList" class="mt-3">
                    <!-- 论文列表将在这里显示 -->
                  </div>
                </div>
              </div>
            </div>
            
            <script>
              // 全局变量存储论文数据
              let allPapers = [];
              
              // 页面加载时获取论文数据
              document.addEventListener('DOMContentLoaded', async () => {
                try {
                  const response = await fetch('papers_data.json');
                  allPapers = await response.json();
                  console.log(`成功加载 ${allPapers.length} 篇论文数据`);
                } catch (error) {
                  console.error('加载论文数据失败:', error);
                }
              });
              
              // 筛选按钮点击事件
              document.getElementById('filterButton').addEventListener('click', () => {
                const topics = document.getElementById('topicInput').value
                  .split(',')
                  .map(t => t.trim().toLowerCase())
                  .filter(t => t);
                  
                const numPapers = parseInt(document.getElementById('numPapersInput').value) || 50;
                
                // 显示加载中
                document.getElementById('loading').style.display = 'block';
                document.getElementById('statsSection').style.display = 'none';
                document.getElementById('resultsSection').style.display = 'none';
                
                // 使用setTimeout让UI有时间更新
                setTimeout(() => filterPapers(topics, numPapers), 100);
              });
              
              // 筛选论文函数
              function filterPapers(topics, numPapers) {
                // 根据主题筛选论文
                let filteredPapers = allPapers;
                
                if (topics && topics.length > 0) {
                  filteredPapers = allPapers.filter(paper => {
                    const title = paper.title.toLowerCase();
                    return topics.some(topic => title.includes(topic));
                  });
                }
                
                // 收集统计信息
                const stats = {};
                filteredPapers.forEach(paper => {
                  const key = `${paper.conference}/${paper.year}`;
                  if (!stats[key]) {
                    stats[key] = {
                      conference: paper.conference,
                      year: paper.year,
                      count: 0
                    };
                  }
                  stats[key].count++;
                });
                
                // 计算比例
                const totalPapers = filteredPapers.length;
                Object.values(stats).forEach(stat => {
                  stat.percentage = (stat.count / totalPapers * 100).toFixed(2);
                });
                
                // 按年份和会议排序
                const sortedStats = Object.values(stats).sort((a, b) => {
                  if (a.year !== b.year) return b.year - a.year;
                  return a.conference.localeCompare(b.conference);
                });
                
                // 更新统计表格
                const statsTableBody = document.getElementById('statsTableBody');
                statsTableBody.innerHTML = '';
                
                sortedStats.forEach(stat => {
                  const row = document.createElement('tr');
                  row.innerHTML = `
                    <td>${stat.conference}</td>
                    <td>${stat.year}</td>
                    <td>${stat.count}</td>
                    <td>${stat.percentage}%</td>
                  `;
                  statsTableBody.appendChild(row);
                });
                
                // 随机选择指定数量的论文
                let selectedPapers;
                if (filteredPapers.length > numPapers) {
                  // 洗牌算法
                  const shuffled = [...filteredPapers];
                  for (let i = shuffled.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
                  }
                  selectedPapers = shuffled.slice(0, numPapers);
                } else {
                  selectedPapers = filteredPapers;
                }
                
                // 按论文标题排序
                selectedPapers.sort((a, b) => a.title.localeCompare(b.title));
                
                // 更新论文列表
                const papersList = document.getElementById('papersList');
                papersList.innerHTML = '';
                
                selectedPapers.forEach(paper => {
                  const paperDiv = document.createElement('div');
                  paperDiv.className = 'paper-item';
                  paperDiv.innerHTML = `
                    <div>
                      <span class="conference-badge">${paper.conference}/${paper.year}</span>
                      ${paper.title}
                    </div>
                  `;
                  papersList.appendChild(paperDiv);
                });
                
                // 更新结果计数
                document.getElementById('resultsCount').textContent = selectedPapers.length;
                
                // 隐藏加载中，显示结果
                document.getElementById('loading').style.display = 'none';
                document.getElementById('statsSection').style.display = 'block';
                document.getElementById('resultsSection').style.display = 'block';
              }
            </script>
            
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
          </body>
          </html>
          EOF
      
      - name: Setup Pages
        uses: actions/configure-pages@v3
        with:
          enablement: true
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2 